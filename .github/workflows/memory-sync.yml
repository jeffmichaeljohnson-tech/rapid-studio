name: Memory Sync

on:
  push:
    branches: [main, develop]
    paths:
      - '.memory/**'
      - '.cursor/context/**'
      - 'docs/context/**'
  
  pull_request:
    branches: [main]
    paths:
      - '.memory/**'
  
  schedule:
    # Run every 15 minutes to catch external updates
    - cron: '*/15 * * * *'
  
  workflow_dispatch:

jobs:
  sync-memory:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install chokidar
      
      - name: Check for memory updates
        id: check
        run: |
          # Check if memory files were updated in the last 15 minutes
          RECENT=$(find .memory .cursor/context docs/context -type f -mmin -15 2>/dev/null | wc -l)
          echo "recent_changes=$RECENT" >> $GITHUB_OUTPUT
          
          if [ "$RECENT" -gt 0 ]; then
            echo "📝 Found $RECENT recent memory updates"
          else
            echo "✅ No recent memory updates"
          fi
      
      - name: Validate memory structure
        if: steps.check.outputs.recent_changes > 0
        run: |
          echo "🔍 Validating memory structure..."
          
          # Check required directories
          for dir in sessions context decisions progress sync; do
            if [ ! -d ".memory/$dir" ]; then
              echo "⚠️  Missing directory: .memory/$dir"
              mkdir -p ".memory/$dir"
            fi
          done
          
          # Validate JSON files
          find .memory -name "*.json" -type f | while read file; do
            if ! jq empty "$file" 2>/dev/null; then
              echo "❌ Invalid JSON: $file"
              exit 1
            fi
          done
          
          echo "✅ Memory structure valid"
      
      - name: Generate memory digest
        if: steps.check.outputs.recent_changes > 0
        run: |
          echo "📊 Generating memory digest..."
          
          cat > .memory/digest.md << EOF
          # Memory Digest - $(date -Iseconds)
          
          ## Statistics
          - Total sessions: $(find .memory/sessions -name "*.json" 2>/dev/null | wc -l)
          - Context files: $(find .memory/context -type f 2>/dev/null | wc -l)
          - Decisions: $(find .memory/decisions -type f 2>/dev/null | wc -l)
          
          ## Recent Activity (Last 24h)
          $(find .memory -type f -mtime -1 -exec ls -lh {} \; | awk '{print "- " $9 " (" $5 ")"}')
          
          ## Git Status
          - Branch: $(git branch --show-current)
          - Commit: $(git rev-parse --short HEAD)
          - Modified: $(git status --porcelain .memory | wc -l) files
          
          ---
          Generated by GitHub Actions
          EOF
          
          cat .memory/digest.md
      
      - name: Sync with Cursor context
        if: steps.check.outputs.recent_changes > 0
        run: |
          echo "🔄 Syncing with Cursor context..."
          
          # Copy latest active context to Cursor
          if [ -f ".memory/context/active-context.md" ]; then
            mkdir -p .cursor/context
            cp .memory/context/active-context.md .cursor/context/from-memory.md
            echo "✅ Synced to Cursor"
          fi
      
      - name: Commit and push updates
        if: steps.check.outputs.recent_changes > 0
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add .memory/ .cursor/context/ docs/context/
          
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            git commit -m "[Memory] Auto-sync from GitHub Actions

            - Validated memory structure
            - Generated digest
            - Synced with Cursor context
            
            Triggered by: ${{ github.event_name }}"
            
            git push
            echo "⬆️  Changes pushed to repository"
          fi
      
      - name: Archive old sessions
        if: github.event_name == 'schedule'
        run: |
          echo "🗄️  Archiving sessions older than 7 days..."
          
          mkdir -p .memory/sessions/archive
          
          find .memory/sessions -name "session-*.json" -mtime +7 -not -path "*/archive/*" | while read file; do
            gzip -c "$file" > "${file}.gz"
            mv "${file}.gz" .memory/sessions/archive/
            rm "$file"
            echo "   Archived: $(basename $file)"
          done
          
          ARCHIVED=$(find .memory/sessions/archive -name "*.gz" | wc -l)
          echo "✅ Archived $ARCHIVED sessions"
      
      - name: Cleanup old archives
        if: github.event_name == 'schedule'
        run: |
          echo "🧹 Removing archives older than 30 days..."
          find .memory/sessions/archive -name "*.gz" -mtime +30 -delete
          echo "✅ Cleanup complete"
      
      - name: Update sync state
        if: always()
        run: |
          # Update .sync-state.json with latest sync info
          cat > .memory/.sync-state.json << EOF
          {
            "lastGitHubSync": "$(date -Iseconds)",
            "lastAction": "${{ github.event_name }}",
            "workflowRun": "${{ github.run_number }}",
            "commitSha": "${{ github.sha }}",
            "actor": "${{ github.actor }}"
          }
          EOF
